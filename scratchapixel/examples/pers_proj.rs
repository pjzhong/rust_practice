use std::env;
use std::fs::File;
use std::io::Write;

use scratchapixel::matrix::Matrix44;
use scratchapixel::vec::{Vec2, Vec3};

const TRIANGLES: usize = 128;
const TRIS_IDX: [usize; TRIANGLES * 3] = [
    8, 7, 9, 6, 5, 7, 4, 3, 5, 2, 1, 3, 0, 9, 1, 5, 3, 7, 7, 3, 9, 9, 3, 1, 10, 12, 11, 13, 15, 14,
    15, 13, 16, 13, 17, 16, 18, 20, 19, 17, 20, 21, 20, 23, 22, 20, 24, 23, 23, 26, 25, 24, 26, 23,
    26, 27, 25, 26, 28, 27, 27, 30, 29, 28, 30, 27, 30, 32, 31, 30, 33, 32, 27, 30, 34, 32, 36, 35,
    33, 36, 32, 36, 38, 37, 36, 39, 38, 38, 41, 40, 39, 41, 38, 41, 43, 42, 41, 44, 43, 44, 45, 43,
    44, 47, 46, 44, 48, 47, 48, 49, 47, 48, 51, 50, 10, 52, 12, 13, 53, 54, 55, 17, 54, 13, 54, 17,
    56, 57, 20, 17, 58, 20, 20, 59, 60, 20, 60, 24, 60, 61, 26, 24, 60, 26, 26, 61, 62, 26, 62, 28,
    62, 63, 30, 28, 62, 30, 30, 64, 65, 30, 65, 33, 62, 66, 30, 65, 67, 36, 33, 65, 36, 36, 68, 69,
    36, 69, 39, 69, 70, 41, 39, 69, 41, 41, 71, 72, 41, 72, 44, 44, 72, 73, 44, 74, 75, 44, 75, 48,
    48, 75, 76, 48, 77, 51, 78, 80, 79, 81, 83, 82, 83, 81, 84, 81, 85, 84, 86, 88, 87, 85, 88, 89,
    88, 91, 90, 88, 92, 91, 91, 94, 93, 92, 94, 91, 94, 95, 93, 94, 96, 95, 95, 98, 97, 96, 98, 95,
    98, 100, 99, 98, 101, 100, 95, 98, 102, 100, 104, 103, 101, 104, 100, 104, 106, 105, 104, 107,
    106, 106, 109, 108, 107, 109, 106, 109, 111, 110, 109, 112, 111, 112, 113, 111, 112, 115, 114,
    112, 116, 115, 116, 117, 115, 116, 119, 118, 78, 120, 80, 81, 121, 122, 123, 85, 122, 81, 122,
    85, 124, 125, 88, 85, 126, 88, 88, 127, 128, 88, 128, 92, 128, 129, 94, 92, 128, 94, 94, 129,
    130, 94, 130, 96, 130, 131, 98, 96, 130, 98, 98, 132, 133, 98, 133, 101, 130, 134, 98, 133,
    135, 104, 101, 133, 104, 104, 136, 137, 104, 137, 107, 137, 138, 109, 107, 137, 109, 109, 139,
    140, 109, 140, 112, 112, 140, 141, 112, 142, 143, 112, 143, 116, 116, 143, 144, 116, 145, 119,
];

fn compute_pixel_coordinates(
    p_world: &Vec3<f32>,
    p_raster: &mut Vec2<i32>,
    world_to_camera: &Matrix44<f32>,
    canvas_width: f32,
    canvas_height: f32,
    image_width: u32,
    image_height: u32,
) {
    let mut p_camera = Vec3::<f32>::default();
    world_to_camera.mult_vec_matrix(&p_world, &mut p_camera);
    let mut p_screen = Vec2::<f32>::default();
    p_screen.x = p_camera.x / -p_camera.z;
    p_screen.y = p_camera.y / -p_camera.z;
    let mut p_ndc = Vec2::<f32>::default();
    p_ndc.x = (p_screen.x + canvas_width * 0.5) / canvas_width;
    p_ndc.y = (p_screen.y + canvas_height * 0.5) / canvas_height;
    p_raster.x = (p_ndc.x * (image_width as f32)) as i32;
    p_raster.y = ((1.0 - p_ndc.y) * (image_height as f32)) as i32;
}

/// thanks [`scratchapixel`]
/// This code is copy from ['perspproj'] and translate to rust
///
/// [`scratchapixel`]: https://www.scratchapixel.com/index.php/
/// [`perspproj`]: https://www.scratchapixel.com/code.php?id=23&origin=/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point&src=0
pub fn main() {

    //List of vertices making up the object
    let verts = [
        Vec3::f32(0.0, 39.034, 0.0),
        Vec3::f32(0.76212, 36.843, 0.0),
        Vec3::f32(3.0, 36.604, 0.0),
        Vec3::f32(1.0, 35.604, 0.0),
        Vec3::f32(2.0162, 33.382, 0.0),
        Vec3::f32(0.0, 34.541, 0.0),
        Vec3::f32(-2.0162, 33.382, 0.0),
        Vec3::f32(-1.0, 35.604, 0.0),
        Vec3::f32(-3.0, 36.604, 0.0),
        Vec3::f32(-0.76212, 36.843, 0.0),
        Vec3::f32(-0.040181, 34.31, 0.0),
        Vec3::f32(3.2778, 30.464, 0.0),
        Vec3::f32(-0.040181, 30.464, 0.0),
        Vec3::f32(-0.028749, 30.464, 0.0),
        Vec3::f32(3.2778, 30.464, 0.0),
        Vec3::f32(1.2722, 29.197, 0.0),
        Vec3::f32(1.2722, 29.197, 0.0),
        Vec3::f32(-0.028703, 29.197, 0.0),
        Vec3::f32(1.2722, 29.197, 0.0),
        Vec3::f32(5.2778, 25.398, 0.0),
        Vec3::f32(-0.02865, 25.398, 0.0),
        Vec3::f32(1.2722, 29.197, 0.0),
        Vec3::f32(5.2778, 25.398, 0.0),
        Vec3::f32(3.3322, 24.099, 0.0),
        Vec3::f32(-0.028683, 24.099, 0.0),
        Vec3::f32(7.1957, 20.299, 0.0),
        Vec3::f32(-0.02861, 20.299, 0.0),
        Vec3::f32(5.2778, 19.065, 0.0),
        Vec3::f32(-0.028663, 18.984, 0.0),
        Vec3::f32(9.2778, 15.265, 0.0),
        Vec3::f32(-0.028571, 15.185, 0.0),
        Vec3::f32(9.2778, 15.265, 0.0),
        Vec3::f32(7.3772, 13.999, 0.0),
        Vec3::f32(-0.028625, 13.901, 0.0),
        Vec3::f32(9.2778, 15.265, 0.0),
        Vec3::f32(12.278, 8.9323, 0.0),
        Vec3::f32(-0.028771, 8.9742, 0.0),
        Vec3::f32(12.278, 8.9323, 0.0),
        Vec3::f32(10.278, 7.6657, 0.0),
        Vec3::f32(-0.028592, 7.6552, 0.0),
        Vec3::f32(15.278, 2.5994, 0.0),
        Vec3::f32(-0.028775, 2.6077, 0.0),
        Vec3::f32(15.278, 2.5994, 0.0),
        Vec3::f32(13.278, 1.3329, 0.0),
        Vec3::f32(-0.028727, 1.2617, 0.0),
        Vec3::f32(18.278, -3.7334, 0.0),
        Vec3::f32(18.278, -3.7334, 0.0),
        Vec3::f32(2.2722, -1.2003, 0.0),
        Vec3::f32(-0.028727, -1.3098, 0.0),
        Vec3::f32(4.2722, -5.0, 0.0),
        Vec3::f32(4.2722, -5.0, 0.0),
        Vec3::f32(-0.028727, -5.0, 0.0),
        Vec3::f32(-3.3582, 30.464, 0.0),
        Vec3::f32(-3.3582, 30.464, 0.0),
        Vec3::f32(-1.3526, 29.197, 0.0),
        Vec3::f32(-1.3526, 29.197, 0.0),
        Vec3::f32(-1.3526, 29.197, 0.0),
        Vec3::f32(-5.3582, 25.398, 0.0),
        Vec3::f32(-1.3526, 29.197, 0.0),
        Vec3::f32(-5.3582, 25.398, 0.0),
        Vec3::f32(-3.4126, 24.099, 0.0),
        Vec3::f32(-7.276, 20.299, 0.0),
        Vec3::f32(-5.3582, 19.065, 0.0),
        Vec3::f32(-9.3582, 15.265, 0.0),
        Vec3::f32(-9.3582, 15.265, 0.0),
        Vec3::f32(-7.4575, 13.999, 0.0),
        Vec3::f32(-9.3582, 15.265, 0.0),
        Vec3::f32(-12.358, 8.9323, 0.0),
        Vec3::f32(-12.358, 8.9323, 0.0),
        Vec3::f32(-10.358, 7.6657, 0.0),
        Vec3::f32(-15.358, 2.5994, 0.0),
        Vec3::f32(-15.358, 2.5994, 0.0),
        Vec3::f32(-13.358, 1.3329, 0.0),
        Vec3::f32(-18.358, -3.7334, 0.0),
        Vec3::f32(-18.358, -3.7334, 0.0),
        Vec3::f32(-2.3526, -1.2003, 0.0),
        Vec3::f32(-4.3526, -5.0, 0.0),
        Vec3::f32(-4.3526, -5.0, 0.0),
        Vec3::f32(0.0, 34.31, 0.040181),
        Vec3::f32(0.0, 30.464, -3.2778),
        Vec3::f32(0.0, 30.464, 0.040181),
        Vec3::f32(0.0, 30.464, 0.028749),
        Vec3::f32(0.0, 30.464, -3.2778),
        Vec3::f32(0.0, 29.197, -1.2722),
        Vec3::f32(0.0, 29.197, -1.2722),
        Vec3::f32(0.0, 29.197, 0.028703),
        Vec3::f32(0.0, 29.197, -1.2722),
        Vec3::f32(0.0, 25.398, -5.2778),
        Vec3::f32(0.0, 25.398, 0.02865),
        Vec3::f32(0.0, 29.197, -1.2722),
        Vec3::f32(0.0, 25.398, -5.2778),
        Vec3::f32(0.0, 24.099, -3.3322),
        Vec3::f32(0.0, 24.099, 0.028683),
        Vec3::f32(0.0, 20.299, -7.1957),
        Vec3::f32(0.0, 20.299, 0.02861),
        Vec3::f32(0.0, 19.065, -5.2778),
        Vec3::f32(0.0, 18.984, 0.028663),
        Vec3::f32(0.0, 15.265, -9.2778),
        Vec3::f32(0.0, 15.185, 0.028571),
        Vec3::f32(0.0, 15.265, -9.2778),
        Vec3::f32(0.0, 13.999, -7.3772),
        Vec3::f32(0.0, 13.901, 0.028625),
        Vec3::f32(0.0, 15.265, -9.2778),
        Vec3::f32(0.0, 8.9323, -12.278),
        Vec3::f32(0.0, 8.9742, 0.028771),
        Vec3::f32(0.0, 8.9323, -12.278),
        Vec3::f32(0.0, 7.6657, -10.278),
        Vec3::f32(0.0, 7.6552, 0.028592),
        Vec3::f32(0.0, 2.5994, -15.278),
        Vec3::f32(0.0, 2.6077, 0.028775),
        Vec3::f32(0.0, 2.5994, -15.278),
        Vec3::f32(0.0, 1.3329, -13.278),
        Vec3::f32(0.0, 1.2617, 0.028727),
        Vec3::f32(0.0, -3.7334, -18.278),
        Vec3::f32(0.0, -3.7334, -18.278),
        Vec3::f32(0.0, -1.2003, -2.2722),
        Vec3::f32(0.0, -1.3098, 0.028727),
        Vec3::f32(0.0, -5.0, -4.2722),
        Vec3::f32(0.0, -5.0, -4.2722),
        Vec3::f32(0.0, -5.0, 0.028727),
        Vec3::f32(0.0, 30.464, 3.3582),
        Vec3::f32(0.0, 30.464, 3.3582),
        Vec3::f32(0.0, 29.197, 1.3526),
        Vec3::f32(0.0, 29.197, 1.3526),
        Vec3::f32(0.0, 29.197, 1.3526),
        Vec3::f32(0.0, 25.398, 5.3582),
        Vec3::f32(0.0, 29.197, 1.3526),
        Vec3::f32(0.0, 25.398, 5.3582),
        Vec3::f32(0.0, 24.099, 3.4126),
        Vec3::f32(0.0, 20.299, 7.276),
        Vec3::f32(0.0, 19.065, 5.3582),
        Vec3::f32(0.0, 15.265, 9.3582),
        Vec3::f32(0.0, 15.265, 9.3582),
        Vec3::f32(0.0, 13.999, 7.4575),
        Vec3::f32(0.0, 15.265, 9.3582),
        Vec3::f32(0.0, 8.9323, 12.358),
        Vec3::f32(0.0, 8.9323, 12.358),
        Vec3::f32(0.0, 7.6657, 10.358),
        Vec3::f32(0.0, 2.5994, 15.358),
        Vec3::f32(0.0, 2.5994, 15.358),
        Vec3::f32(0.0, 1.3329, 13.358),
        Vec3::f32(0.0, -3.7334, 18.358),
        Vec3::f32(0.0, -3.7334, 18.358),
        Vec3::f32(0.0, -1.2003, 2.3526),
        Vec3::f32(0.0, -5.0, 4.3526),
        Vec3::f32(0.0, -5.0, 4.3526),
    ];

    let camera_to_world: Matrix44<f32> = Matrix44 {
        m: [
            [0.871214, 0.0, -0.490904, 0.0],
            [-0.192902, 0.919559, -0.342346, 0.0],
            [0.451415, 0.392953, 0.801132, 0.0],
            [14.777467, 29.361945, 27.993464, 1.0],
        ],
    };
    let world_to_camera = camera_to_world.inverse();
    let (canvas_width, canvas_height) = (2.0f32, 2.0f32);
    let (image_width, image_height) = (512u32, 512u32);

    let current_dir = env::current_dir().unwrap();
    let mut file = File::create(current_dir.join("proj.svg")).unwrap();
    if file
        .write_all("<svg version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" height=\"512\" width=\"512\">".as_bytes())
        .is_err()
    {
        eprintln!("write file err");
        return;
    }

    let mut buffer = String::new();
    for i in 0..TRIANGLES {
        let v0_world = verts[TRIS_IDX[i * 3]];
        let v1_world = verts[TRIS_IDX[i * 3 + 1]];
        let v2_world = verts[TRIS_IDX[i * 3 + 2]];
        let (mut v0_raster, mut v1_raster, mut v2_raster) = (
            Vec2::<i32>::default(),
            Vec2::<i32>::default(),
            Vec2::<i32>::default(),
        );

        compute_pixel_coordinates(
            &v0_world,
            &mut v0_raster,
            &world_to_camera,
            canvas_width,
            canvas_height,
            image_width,
            image_height,
        );
        compute_pixel_coordinates(
            &v1_world,
            &mut v1_raster,
            &world_to_camera,
            canvas_width,
            canvas_height,
            image_width,
            image_height,
        );
        compute_pixel_coordinates(
            &v2_world,
            &mut v2_raster,
            &world_to_camera,
            canvas_width,
            canvas_height,
            image_width,
            image_height,
        );

        buffer.clear();

        buffer += &format!("<line x1=\"{}\" y1=\"{}\" x2=\"{}\" y2=\"{}\" style=\"stroke:rgb(0,0,0);stroke-width:1\" />\n", v0_raster.x, v0_raster.y, v1_raster.x, v1_raster.y);
        buffer += &format!("<line x1=\"{}\" y1=\"{}\" x2=\"{}\" y2=\"{}\" style=\"stroke:rgb(0,0,0);stroke-width:1\" />\n", v1_raster.x, v1_raster.y, v2_raster.x, v2_raster.y);
        buffer += &format!("<line x1=\"{}\" y1=\"{}\" x2=\"{}\" y2=\"{}\" style=\"stroke:rgb(0,0,0);stroke-width:1\" />\n", v2_raster.x, v2_raster.y, v0_raster.x, v0_raster.y);

        if let Err(e) = file.write_all(buffer.as_bytes()) {
            eprintln!("write file err, {:?}", e);
            return;
        }
    }

    if let Err(e) = file.write_all("</svg>\n".as_bytes()) {
        eprintln!("write file err, {:?}", e);
        return;
    }

    if let Err(e) = file.flush() {
        eprintln!("flush file err, {:?}", e);
        return;
    }
}


